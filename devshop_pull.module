<?php


define('DEVSHOP_PULL_DISABLED', 0);
define('DEVSHOP_PULL_QUEUE', 1);
define('DEVSHOP_PULL_CALLBACK', 2);


define('DEVSHOP_PULL_CALLBACK_URL', 'devshop/pull');
define('DSGH_WD_TYPE', 'devshop');

/**
 * Implementation of hook_perm()
 */
function devshop_pull_perm() {
  return array(
    'access devshop pull callback',
    'configure devshop pull',
  );
}

/**
 * Implementation of hook_menu()
 */
function devshop_pull_menu() {
  $items['admin/hosting/devshop_pull'] = array(
    'title' => 'DevShop Pull Settings',
    'description' => 'Configure Pull Code URL callback ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devshop_pull_settings'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer hosting settings'),
    'file' => 'devshop_pull.settings.inc'
  );
  $items[DEVSHOP_PULL_CALLBACK_URL] = array(
    'page callback' => 'devshop_pull_callback',
    'access arguments' => array('access devshop pull callback'),
    'file' => 'devshop_pull.inc'
  );
  return $items;
}

/**
 * Implements hook_hosting_queues()
 */
function devshop_pull_hosting_queues() {
  $items['pull'] = array(
    'type' => 'batch', 
    'name' => t('Pull queue'), 
    'description' => t('Run git pull on platforms configured to do so.'), 
    'total_items' => 'TODO',//hosting_site_count(), 
    'frequency' => strtotime("1 minute", 0), 
    'singular' => t('platform'), 
    'plural' => t('platforms'),
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function devshop_pull_form_alter(&$form, &$form_state, $form_id){
  if ($form_id == 'platform_node_form'){
    // Get node
    $node = $form['#node'];
    
    // Get default value
    if (is_null($node->pull_method)){
      $node->pull_method = DEVSHOP_PULL_DISABLED;
    }
    
    $form['pull_method'] = array(
      '#title' => 'Automatic Git Pull Method',
      '#type' => 'radios',
      '#description' => t('Choose the method of regularly calling "Pull Code".  See !link to configure the queue.  See !link2 to configure URL Callback.', array(
        '!link' => l(t('Hosting > Queues'), 'admin/hosting/queues'),
        '!link2' => l(t('Hosting > DevShop Pull Settings'), 'admin/hosting/devshop_pull')
      )),
      '#default_value' => $node->pull_method,
      '#options' => array(
	DEVSHOP_PULL_DISABLED => t('Pull disabled.'),
	DEVSHOP_PULL_QUEUE => t('Pull on queue (every minute).'),
	DEVSHOP_PULL_CALLBACK => t('Pull on URL Callback (ie. GitHub Webhook)'),
	
      ),
    );
    $form['pull_reset'] = array(
      '#title' => 'Hard Reset on Pull',
      '#type' => 'checkbox',
      '#description' => t('Reset any changes to platform files. <em>WARNING: Any uncommitted changes to the platform files will be discarded.</em>'),
      '#default_value' => $node->pull_reset,
    );
  }
}

/**
 * Implementation of hosting_QUEUE_TYPE_queue().
 */
function hosting_pull_queue($count) {

  $result = db_query("SELECT d.* FROM {node} n LEFT JOIN {hosting_platform} s ON  n.nid=s.nid LEFT JOIN {hosting_devshop_pull} d ON n.nid = d.platform_nid WHERE s.status = %d AND d.pull_method = %d ORDER BY d.last_pull ASC, n.nid ASC", HOSTING_PLATFORM_ENABLED, DEVSHOP_PULL_QUEUE);
  
  //@TODO: Run same code as URL Callback!!  All sites on all platforms.  
  
  while ($platform = db_fetch_object($result)) {
    $platform_name = hosting_context_name($platform->platform_nid);
    if ($platform->pull_reset){
      //Set reset option.
      $options = array(
        'reset' => TRUE,
      );
    } else {
      $options = array();
    }
    
    //@TODO
    provision_backend_invoke($platform_name, "pull", array(), $options);
    $error = drush_get_error();
    if ($error){
      //@TODO: Set last_pull_status
      watchdog('devshop', 'Pull FAILED on platform: @alias', array('@alias' => $platform_name));
      db_query('UPDATE {hosting_devshop_pull} SET last_pull = %d, last_pull_status = %d WHERE platform_nid = %d', time(), 0, $platform->platform_nid);
      
    } else {
      //@TODO: Set last_pull
      watchdog('devshop', 'Pull Successful on platform: @alias', array('@alias' => $platform_name));
      db_query('UPDATE {hosting_devshop_pull} SET last_pull = %d, last_pull_status = %d WHERE platform_nid = %d', time(), 1, $platform->platform_nid);
    }
  }    
}

/**
 * Implements hook_nodeapi()
 */
function devshop_pull_nodeapi(&$node, $op, $a3 = null) {
  if ($node->type == 'platform' || $node->type == 'site') {
    switch ($op) {
      case 'view':
        if (!$a3) { //!teaser
	  if($node->type == 'platform') {
	    $pnode = $node;
	  }
	  else {
	    $pnode = node_load($node->platform);
	  }
	  
	  // @TODO: PULL QUEUE must be enabled first!  Show a notice to the user if Pull Queue
	  // is not enabled!
	  
	  $pull_method = ($pnode->pull_method == DEVSHOP_PULL_CALLBACK? t('URL Callback'):
			  ($pnode->pull_method == DEVSHOP_PULL_QUEUE? t('Hosting Queue'):
			   (t('Disabled'))));
	  
	  if ($pnode->pull_method == DEVSHOP_PULL_CALLBACK){
	    module_load_include('inc', 'devshop_pull');
	    $url = _devshop_pull_callback_url($pnode);
	    $pull_method .= '<br>' . l(_filter_url_trim($url, 30), $url);
	  }

          if (isset($pnode) && $pnode->pull_method != DEVSHOP_PULL_DISABLED){
	    $node->content['info']['pull'] = array(
	      '#type' => 'item',
	      '#title' => t('Pull Method'),
	      '#weight' => 30,
	      '#value' => $pull_method,
	    );
            $node->content['info']['pull_reset'] = array(
              '#type' => 'item',
              '#title' => t('Reset on Pull'),
              '#weight' => 31,
              '#value' => $pnode->pull_reset? t('Enabled'): t('Disabled'),
            );
            $node->content['info']['last_pull'] = array(
              '#type' => 'item',
              '#title' => t('Last pull'),
              '#weight' => 32,
              '#value' => hosting_format_interval($pnode->last_pull),
            );
            $node->content['info']['last_pull_status'] = array(
              '#type' => 'item',
              '#title' => t('Last pull status'),
              '#weight' => 33,
              '#value' => $pnode->last_pull_status == 1? t('OK'): ($pnode->last_pull? t('Failed'): t('Never Pulled')),
            );
          }
        }
        break;
    case 'load':
      if ($node->type == 'platform') {
	$data = db_fetch_object(db_query('SELECT * FROM {hosting_devshop_pull} WHERE platform_nid =  %d', $node->nid));
	if (!empty($data->platform_nid)){
	  $node->pull_method = $data->pull_method;
	  $node->pull_reset = $data->pull_reset;
	  $node->last_pull = $data->last_pull;
	  $node->last_pull_status = $data->last_pull_status;
	}
      }
      break;
    case 'insert':
    case 'update':
      if ($node->type == 'platform') {
	db_query('DELETE FROM {hosting_devshop_pull} WHERE platform_nid = %d', $node->nid);
	db_query('INSERT INTO {hosting_devshop_pull} (platform_nid, pull_method, pull_reset) VALUES (%d, %d, %d)', $node->nid, $node->pull_method, $node->pull_reset);
      }
      break;
    }
  }
}

/**
 * Get a number of sites that have their pull queue enabled.
 * 
 * @param $limit
 *   Limit to a maximum of this number of sites.
 * @return
 *   An array of site nodes that have a pull queue enabled.
 *
 * @TODO Convert to check pull queue sites.
 */
function devshop_pull_get_sites($limit = 5) {
  //$result = db_query("SELECT n.nid FROM {node} n LEFT JOIN {hosting_platform} p ON n.nid=p.nid WHERE n.type='platform' and p.status = %d ORDER BY p.last_cron ASC, n.nid ASC limit %d", HOSTING_PLATFORM_ENABLED, $limit);
  //while ($nid = db_fetch_object($result)) {
  //  $node = node_load($nid->nid);
  //  if (!empty($node->nid)){
  //    $sites[$nid->nid] = $node;
  //  }
  //}
  //return $sites;
}
