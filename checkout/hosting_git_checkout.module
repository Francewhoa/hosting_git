<?php

/**
 * Implements hook_hosting_tasks().
 */
function hosting_git_checkout_hosting_tasks() {
  $tasks = array();

  $tasks['site']['git-checkout'] = array(
    'title' => t('Git checkout'),
    'description' => t('Runs a git checkout on the current site.'),
    'access callback' => 'hosting_git_checkout_access_checkout',
    'dialog' => TRUE,
  );

  $tasks['platform']['git-checkout'] = array(
    'title' => t('Git checkout'),
    'description' => t('Runs a git checkout on the current platform.'),
    'access callback' => 'hosting_git_checkout_access_checkout',
    'dialog' => TRUE,
  );

  return $tasks;
}

/**
 * Access function for the checkout task on platforms.
 */
function hosting_git_checkout_access_checkout($node) {
  // Only consider doing this if we have a git repo.
  if (empty($node->git['repo_url'])) {
    return FALSE;
  }
  if (($node->type == 'site' && user_access('create site git-checkout task'))
    || ($node->type == 'platform' && user_access('create platform git-checkout task'))) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_permission().
 */
function hosting_git_checkout_permission() {
  return array(
    'create git-checkout task' => array(
      'title' => t('create git-checkout task'),
      'description' => t('Create a git-checkout task for sites'),
    ),
    'create platform git-checkout task' => array(
      'title' => t('create platform git-checkout task'),
      'description' => t('Create a git-checkout task for platforms'),
    ),
  );
}

/**
 * Implements hook_form().
 */
function hosting_task_git_checkout_form($node) {

  $form['checkout_git_ref'] = array(
    '#title' => t('What branch, tag, or hash would you like to checkout?'),
    '#description' => t("The command 'git checkout' will be run using this value."),
    '#type' => 'textfield',
    '#weight' => '-2',
    '#default_value' => isset($_GET['checkout_git_ref'])? $_GET['checkout_git_ref']: '',
  );

  $form['reset_hard'] = array(
    '#title' => t('Force: Reset --hard before checkout?'),
    '#description' => t("Uncommitted changes will be lost."),
    '#type' => 'checkbox',
    '#weight' => '-1',
    '#default_value' => TRUE,
  );
  $form['skip_hooks'] = array(
    '#title' => t('Skip git hooks'),
    '#description' => t("Do not run git hooks after running git checkout.") . ' <em>' .  t('Warning: This may result in an unstable site if a database update is required') . '</em>',
    '#type' => 'checkbox',
    '#weight' => '-1',
    '#default_value' => FALSE,
    '#access' => variable_get('hosting_git_allow_skip_hooks', FALSE),
  );
  $form['git_hooks'] = array(
    '#title' => t('Git Hooks'),
    '#type' => 'checkboxes',
    '#default_value' => $node->git['git_hooks'],
    '#access' => variable_get('hosting_git_allow_task_override_hooks', FALSE),
    '#options' => hosting_git_get_hook_options(),
    '#states' => array(
      'invisible' => array(
        ':input[name="parameters[skip_hooks]"]' => array('checked' => TRUE),
      ),
    ),
    '#element_validate' => array(
      'hosting_git_hooks_implode'
    )
  );

  $hooks = module_invoke_all('hosting_git_hooks');
  foreach ($hooks as $name => $hook) {
    $name = ucfirst($name);
    $items[] = "<label>$name:</label> " . $hook['description'];
  }
  $form['hooks']['hooks_display'] = array(
    '#type' => 'item',
    '#title' => t('Git Hooks'),
    '#markup' => theme('item_list', array('items' => $items)),
    '#access' => !variable_get('hosting_git_allow_task_override_hooks', FALSE),
  );

  return $form;
}

/**
 * Element validate for the hooks field. Implode the string.
 */
function hosting_git_hooks_implode($element, &$form_state) {
  form_set_value($element, implode(',', $element['#value']), $form_state);
}