<?php
/**
 * @file
 * Provides Git integration
 */

define('HOSTING_GIT_PULL_DISABLED', 0);
define('HOSTING_GIT_PULL_QUEUE', 1);
define('HOSTING_GIT_PULL_CALLBACK', 2);
define('HOSTING_GIT_PULL_MANUAL', 3);

define('HOSTING_GIT_WEBHOOK_STATUS_OK', 1);
define('HOSTING_GIT_WEBHOOK_STATUS_ACCESS_DENIED', 2);
define('HOSTING_GIT_WEBHOOK_STATUS_INVALID_CODE', 3);

// These are github's Webhook callback IPs.
// This list grows occaisonally, update it as needed.
define('HOSTING_GIT_WEBHOOK_DEFAULT_ALLOWED_IPS', "
204.232.175.64/27
192.30.252.0/22
");

// The base URL to use for the Post Commit callback.
define('HOSTING_GIT_WEBHOOK_CALLBACK_URL', 'git/pull');

/**
 * Implements hook_hosting_tasks().
 */
function hosting_git_hosting_tasks() {
  $tasks = array();

  $tasks['site']['git-pull'] = array(
    'title' => t('Git pull'),
    'description' => t('Runs a git pull on the current site.'),
    'dialog' => TRUE,
  );

  $tasks['platform']['git-pull'] = array(
    'title' => t('Git pull'),
    'description' => t('Runs a git pull on the current platform.'),
    'access callback' => 'hosting_git_access_platform_pull',
    'dialog' => TRUE,
  );

  return $tasks;
}

/**
 * Access function for the pull task on platforms.
 */
function hosting_git_access_platform_pull($node) {
  if (user_access('create platform git-pull task') && isset($node->git['git_allow_pull_task'])) {
    return $node->git['git_allow_pull_task'];
  }
  return TRUE;
}

/**
 * Implements hook_permission().
 */
function hosting_git_permission() {
  return array(
    'create git-pull task' => array(
      'title' => t('create git-pull task'),
      'description' => t('create git-pull task'),
    ),
    'create platform git-pull task' => array(
      'title' => t('create platform git-pull task'),
      'description' => t('create platform git-pull task'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function hosting_git_menu() {
  $items['admin/hosting/git'] = array(
    'title' => 'Git',
    'description' => 'Configure Git integration',
    'file' => 'hosting_git.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hosting_git_settings_form'),
    'access arguments' => array('administer hosting settings'),
    'tab_parent' => 'admin/hosting',
    'type' => MENU_LOCAL_TASK,
  );
  $items[HOSTING_GIT_WEBHOOK_CALLBACK_URL] = array(
    'page callback' => 'hosting_git_pull_callback',
    'access callback' => TRUE,
    'file' => 'hosting_git.webhook.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function hosting_git_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'platform_node_form' || $form_id == 'site_node_form') {
    // Get node object.
    $node = $form['#node'];

    // Default collapse from makefile fieldset
    $form['frommakefile']['#collapsed'] = TRUE;

    $form['#validate'][] = 'hosting_git_node_form_validate';
    $form['git'] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#title' => t('Deploy from Git'),
      '#collapsible' => TRUE,
      '#description' => t('You may deploy this platform from a Git repository. This functionality cannot be combined with a Makefile.'),
      '#weight' => -1,
    );

    $form['git']['repo_url'] = array(
      '#type' => 'textfield',
      '#title' => 'Repository URL',
      '#description' => t('The full URL that you would pass to <em>git clone</em>. Example:  git@github.com:username/project.git or https://github.com/username/project.git. Note that this repository must be accessible by the Aegir user.'),
      '#default_value' => isset($node->git['repo_url']) ? $node->git['repo_url'] : '',
    );

    $form['git']['repo_branch'] = array(
      '#type' => 'textfield',
      '#title' => 'Branch or tag name',
      '#description' => t('If a branch or tag name is not supplied, the platform will be deployed from <em>master</em>. This must match the Git branch or tag name exactly.'),
      '#default_value' => isset($node->git['repo_branch']) ? $node->git['repo_branch'] : '',
    );
    // repo_url and branch are currently not editable.
    if (!empty($node->nid)) {
      $form['git']['repo_url']['#disabled'] = TRUE;
      $form['git']['repo_branch']['#disabled'] = TRUE;
      $form['git']['repo_url']['#description'] = t('Only available on node creation');
      $form['git']['repo_branch']['#description'] = $form['git']['repo_url']['#description'];
    }

    $form['git']['pull_method'] = array(
      '#title' => 'Automatic Git Pull Method',
      '#type' => 'radios',
      '#description' => t('Choose the method of regularly calling "Pull Code". See !link to configure the queue. See !link2 to configure URL Callback.', array(
        '!link' => l(t('Hosting > Queues'), 'admin/hosting/queues'),
        '!link2' => l(t('Hosting > DevShop Pull Settings'), 'admin/hosting/hosting_git_pull'),
      )),
      '#default_value' => isset($node->git['pull_method']) ? $node->git['pull_method'] : HOSTING_GIT_PULL_DISABLED,
      '#options' => array(
        HOSTING_GIT_PULL_DISABLED => t('Pull disabled.'),
        HOSTING_GIT_PULL_MANUAL => t('Pull only when manually starting a git-pull task.'),
        HOSTING_GIT_PULL_QUEUE => t('Pull on queue (every minute).'),
        HOSTING_GIT_PULL_CALLBACK => t('Pull on URL Callback (ie. GitHub Webhook)'),
      ),
    );
    if (isset($node->nid)) {
      module_load_include('inc', 'hosting_git', 'hosting_git.webhook');
      $form['git']['pull_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Pull Trigger URL'),
        '#value' => _hosting_git_pull_callback_url($node),
        '#description' => t('Configure your repo to hit this URL when it receives a commit.'),
        '#attributes' => array(
          'onclick' => 'this.select()',
        ),
      );
    }
  }
}

/**
 * Validation callback for platform node form.
 */
function hosting_git_node_form_validate($form, &$form_state) {
  //dsm($form);
  //dsm($form_state);
  if (!empty($form_state['values']['git']['repo_url']) && !empty($form_state['values']['makefile']['makefile'])) {
    form_set_error('makefile', t('Git deployment and Makefile deployment cannot be combined'));
  }
}

/**
 * Implements hook_node_update().
 */
function hosting_git_node_update($node) {
  if ($node->type == 'platform' || $node->type == 'site') {
    db_merge('hosting_git')
      ->key(array('nid' => $node->nid))
      ->fields(array(
        'pull_method' => $node->git['pull_method'],
        // fields that should probably stay disabled
        //'repo_url' => $node->git['repo_url'],
        //'repo_branch' => $node->git['repo_branch'],
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_insert().
 */
function hosting_git_node_insert($node) {
  //dsm($node, 'insert');
  if ($node->type == 'platform' || $node->type == 'site') {
    if (empty($node->git['repo_url'])) {
      _hosting_git_node_load_defaults($node);
    }
    db_merge('hosting_git')
      ->key(array('nid' => $node->nid))
      ->fields(array(
        'pull_method' => $node->git['pull_method'],
        'repo_url' => $node->git['repo_url'],
        'repo_branch' => $node->git['repo_branch'],
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_load().
 */
function hosting_git_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if ($node->type == 'platform' || $node->type == 'site') {
      $r = db_query('SELECT * FROM {hosting_git} WHERE nid = :nid', array(':nid' => $node->nid));
      if ($result = $r->fetchObject()) {
        // @TODO: why not $node->git = $result
        $node->git = array();
        $node->git['repo_url'] = $result->repo_url;
        $node->git['repo_branch'] = $result->repo_branch;
        $node->git['pull_method'] = $result->pull_method;
      }
      else {
        _hosting_git_node_load_defaults($node);
      }
      //dsm($node);
    }
  }
}

/**
 * Private function to initialize default values for a node object.
 */
function _hosting_git_node_load_defaults(&$node) {
  $node->git = array();
  $node->git['repo_url'] = '';
  $node->git['repo_branch'] = '';
  $node->git['pull_method'] = HOSTING_GIT_PULL_MANUAL;
}

/**
 * Implements hook_node_delete().
 */
function hosting_git_node_delete($node) {
  if ($node->type == 'platform' || $node->type == 'site') {
    db_delete('hosting_git')
      ->condition('nid', $node->nid)
      ->execute();

  }
}


/**
 * Implements hook_node_type_view().
 */
function hosting_git_node_view($node) {
  if (!empty($node->git['repo_url'])) {
    $node->content['info']['repo_url'] = array(
      '#type' => 'item',
      '#title' => t('Repository URL'),
      '#weight' => 100,
      '#markup' => check_plain($node->git['repo_url']),
    );
    $node->content['info']['repo_branch'] = array(
      '#type' => 'item',
      '#title' => t('Repository branch/tag'),
      '#weight' => 100,
      '#markup' => check_plain($node->git['repo_branch']),
    );
  }
}

/**
 * Implements hook_form().
 */
function hosting_task_git_pull_form($node) {

  $form['reset_hard'] = array(
    '#title' => t('Force: Reset --hard before pulling?'),
    '#description' => t("Uncommitted changes will be lost."),
    '#type' => 'checkbox',
    '#weight' => '-1',
    '#default_value' => TRUE,
  );

  return $form;
}

/**
 * Implements hook_hosting_queues().
 */
function hosting_git_hosting_queues() {
  $items['pull'] = array(
    'type' => 'batch',
    'name' => t('Pull queue'),
    'description' => t('Run git pull on nodes configured to do so.'),
    'total_items' => _hosting_git_pullqueue_get_nodes(),
    'frequency' => strtotime("1 minute", 0),
    'singular' => t('node'),
    'plural' => t('nodes'),
  );
  return $items;
}
/**
 * Implements hosting_QUEUE_TYPE_queue().
 */
function hosting_pull_queue($count) {

  $result = db_query("SELECT nid FROM {hosting_git} "
          . "WHERE pull_method = :pull_method "
          . "ORDER BY last_pull ASC",
          array(':pull_method' => HOSTING_GIT_PULL_QUEUE));

  while ($nid = $result->fetchField()) {

    $args = array('reset_hard' => TRUE);
    hosting_add_task($nid, 'git-pull', $args);
  }
}

/**
 * Get a number of nodes that have their pull queue enabled.
 */
function _hosting_git_pullqueue_get_nodes() {
  $result = db_query("SELECT COUNT(*) FROM {hosting_git} "
          . "WHERE pull_method = :pull_method "
          . "ORDER BY last_pull ASC ",
          array(':pull_method' => HOSTING_GIT_PULL_QUEUE));
  return $result->fetchField();
}


/* Private functions */

/**
 * Check to see if the target dir is empty.
 */
function _hosting_git_isdirempty($dir) {
  if ($handle = @opendir($dir)) {
    // open directory.
    while (($file = readdir($handle)) !== FALSE) {
      if ($file != "." && $file != "..") {
        closedir($handle); // Close directory.
        return FALSE;
      }
    }
    closedir($handle); // Close directory.
  }
  return TRUE;
}

function _hosting_git_getsitepath($node) {
  // Select the platform publish_path for $node->platform.
  $platform_publishpath = db_query("SELECT publish_path FROM {hosting_platform} WHERE nid = :nid", array(':nid' => $node->platform))->fetchField();

  if ($platform_publishpath) {
    return $platform_publishpath . '/sites/' . $node->title;
  }
  else {
    return FALSE;
  }
}

function _hosting_git_getgitlocations() {
  // TODO Should we make this configurable?
  return array(
    '.' => t('Site specific folder root'),
    'modules' => t('Modules'),
    'themes' => t('Themes'),
    'libraries' => t('Libraries'),
  );
}
