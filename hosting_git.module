<?php
/**
 * @file
 * Provides Git integration
 */

define('HOSTING_GIT_WEBHOOK_STATUS_OK', 1);
define('HOSTING_GIT_WEBHOOK_STATUS_ACCESS_DENIED', 2);
define('HOSTING_GIT_WEBHOOK_STATUS_INVALID_CODE', 3);
define('HOSTING_GIT_WEBHOOK_STATUS_OTHER_REF', 4);

// These are github's Webhook callback IPs.
// This list grows occaisonally, update it as needed.
define('HOSTING_GIT_WEBHOOK_DEFAULT_ALLOWED_IPS', "
204.232.175.64/27
192.30.252.0/22
");


/**
 * Implements hook_menu().
 */
function hosting_git_menu() {
  $items['admin/hosting/git'] = array(
    'title' => 'Git',
    'description' => 'Configure Git integration',
    'file' => 'hosting_git.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hosting_git_settings_form'),
    'access arguments' => array('administer hosting settings'),
    'tab_parent' => 'admin/hosting',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function hosting_git_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'platform_node_form' || $form_id == 'site_node_form') {

    // Get node object.
    $node = $form['#node'];

    // Skip Git forms for exsisting sites without a repo URL.
    // Adding one later is currently not supported.
    if (isset($node->nid) && $node->verified && empty($node->git['repo_url'])) {
      return;
    }

    if ($form_id == 'platform_node_form') {
      $node_type = 'platform';
      $deploy_description = t('You may deploy this platform from a Git repository. This functionality cannot be combined with a Makefile.');
      // Default collapse 'from makefile' fieldset.
      $form['frommakefile']['#collapsed'] = TRUE;
    }

    if ($form_id == 'site_node_form') {
      $node_type = 'site';
      $deploy_description = t('You may deploy this site from a Git repository.');
    }

    $form['#validate'][] = 'hosting_git_node_form_validate';
    $form['git'] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#title' => t('Deploy from Git'),
      '#collapsible' => TRUE,
      '#description' => $deploy_description,
      '#weight' => -1,
    );

    if (!isset($node->nid) || (!$node->verified && !isset($node->git['repo_url']))) {
      $form['git']['repo_url'] = array(
        '#type' => 'textfield',
        '#title' => 'Repository URL',
        '#description' => t('The full URL that you would pass to <em>git clone</em>. Example:  git@github.com:username/project.git or https://github.com/username/project.git. Note that this repository must be accessible by the Aegir user.'),
        '#default_value' => isset($node->git['repo_url']) ? $node->git['repo_url'] : '',
      );
      $form['git']['repo_path'] = array(
        '#type' => 'textfield',
        '#title' => 'Repository path',
        '#description' => t('Defaults to the Publish Path if left blank. If Drupal is not in the root of your repository, enter the absolute path to clone the repository to, and edit the Publish Path to point to the correct subfolder. For example, if your Drupal code is in <code>docroot</code>, set Repository path to <code>/var/aegir/platforms/NAME</code> and Publish path to <code>/var/aegir/platforms/NAME/docroot</code>'),
        '#default_value' => isset($node->git['repo_path']) ? $node->git['repo_path'] : '',
        '#element_validate' => array(
          'hosting_git_repo_path_validate'
        ),
      );

      $form['git']['git_ref'] = array(
        '#type' => 'textfield',
        '#title' => 'Branch or tag name',
        '#description' => t('If a branch or tag name is not supplied, the @node_type will be deployed from <em>master</em>. This must match the Git branch or tag name exactly.', array('@node_type' => $node_type)),
        '#default_value' => isset($node->git['git_ref']) ? $node->git['git_ref'] : 'master',
      );
    }
    else {
      // Display it.
      $form['git']['repo_url_display'] = array(
        '#type' => 'item',
        '#title' => t('Repo URL'),
        '#markup' => $node->git['repo_url'],
      );
      $form['git']['repo_path_display'] = array(
        '#type' => 'item',
        '#title' => t('Repo Path'),
        '#markup' => $node->git['repo_path'],
      );
      $form['git']['git_ref_display'] = array(
        '#type' => 'item',
        '#title' => 'Branch or tag name',
        '#markup' => isset($node->git['git_ref']) ? $node->git['git_ref'] : 'master',
        '#description' => 'Use a checkout task to change this value.',
      );
    }

    // Default collapse one fieldset based on the current node.
    if (empty($node->frommakefile['makefile'])) {
      $form['frommakefile']['#collapsed'] = TRUE;
    }
    elseif (empty($node->git['repo_url'])) {
      $form['git']['#collapsed'] = TRUE;
    }
  }
}

/**
 * Form element validator for the Repo Path. Checks that the repo path contains the platform path.
 *
 * @param $element
 * @param $form_state
 * @param $form
 */
function hosting_git_repo_path_validate($element, &$form_state, $form) {
  
  // Don't do anything unless we have a repo URL.
  if (empty($form_state['values']['git']['repo_url'])) {
    return;
  }
  
  // If repo path is empty, set value to publish path.
  if (empty($element['#value'])) {
    form_set_value($element, $form_state['values']['publish_path'], $form_state);
  }
  else {
    // Get the full publish path. This is how hosting_platform_form_validate() does it.
    $publish_path = variable_get('hosting_platform_base_path', '/var/aegir/platforms/') . $form_state['values']['publish_path'];
    $repo_path = $form_state['values']['git']['repo_path'];
    
    // Check that the repo_path contains the publish path.
    if (strpos($publish_path, $repo_path) !== 0) {
      form_error($element, t('The Repository Path must contain the Publish Path. Edit the Publish Path or Repository Path and try again.'));
    }
  }
}

/**
 * Validation callback for platform node form.
 */
function hosting_git_node_form_validate($form, &$form_state) {
  if (!empty($form_state['values']['git']['repo_url']) && !empty($form_state['values']['frommakefile']['makefile'])) {
    form_set_error('makefile', t('Git deployment and Makefile deployment cannot be combined'));
  }
}

/**
 * Implements hook_node_insert().
 */
function hosting_git_node_insert($node) {
  return hosting_git_node_update($node);
}

/**
 * Implements hook_node_update().
 */
function hosting_git_node_update($node) {
  if ($node->type == 'platform' || $node->type == 'site') {
    if (empty($node->git['repo_url']) || empty($node->git['git_ref'])) {
      _hosting_git_node_load_defaults($node);
    }

    db_merge('hosting_git')
      ->key(array('nid' => $node->nid))
      ->fields(array(
        'repo_url' => $node->git['repo_url'],
        'repo_path' => $node->git['repo_path'],
        'git_ref' => $node->git['git_ref'],
      ))
      ->execute();
  }
}


/**
 * Implements hook_node_load().
 */
function hosting_git_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if ($node->type == 'platform' || $node->type == 'site') {
      $r = db_query('SELECT * FROM {hosting_git} WHERE nid = :nid', array(':nid' => $node->nid));
      if ($result = $r->fetchObject()) {
        if (!isset($node->git)) {
          $node->git = array();
        }

        $node->git['repo_url'] = $result->repo_url;
        $node->git['repo_path'] = $result->repo_path;
        $node->git['git_ref'] = $result->git_ref;
      }
      else {
        _hosting_git_node_load_defaults($node);
      }
    }
  }
}

/**
 * Private function to initialize default values for a node object.
 */
function _hosting_git_node_load_defaults(&$node) {
  if (!isset($node->git)) {
    $node->git = array();
  }

  if (!isset($node->git['repo_url'])) {
    $node->git['repo_url'] = '';
  }

  if (!isset($node->git['repo_path'])) {
    $node->git['repo_path'] = '';
  }

  if (!isset($node->git['git_ref'])) {
    $node->git['git_ref'] = 'master';
  }
}

/**
 * Implements hook_node_delete().
 */
function hosting_git_node_delete($node) {
  if ($node->type == 'platform' || $node->type == 'site') {
    db_delete('hosting_git')
      ->condition('nid', $node->nid)
      ->execute();

  }
}

/**
 * Implements hook_node_type_view().
 */
function hosting_git_node_view($node) {
  if (!empty($node->git['repo_url'])) {
    $node->content['info']['repo_url'] = array(
      '#type' => 'item',
      '#title' => t('Git URL'),
      '#weight' => 100,
      '#markup' => check_plain($node->git['repo_url']),
    );
    
    // If repo path is different than publish path, show it.
    if ($node->git['repo_path'] != $node->publish_path) {
      $node->content['info']['repo_path'] = array(
        '#type' => 'item',
        '#title' => t('Git Repository Path'),
        '#weight' => 100,
        '#markup' => check_plain($node->git['repo_path']),
      );
    }
    $ref = $node->git['git_ref'] ? $node->git['git_ref'] : t('Pending Verification');
    $node->content['info']['git_ref'] = array(
      '#type' => 'item',
      '#title' => t('Git reference'),
      '#weight' => 100,
      '#markup' => $ref,
    );
  }
}

/* Private functions */

/**
 * Check to see if the target dir is empty.
 */
function _hosting_git_isdirempty($dir) {
  if ($handle = @opendir($dir)) {
    // Open directory.
    while (($file = readdir($handle)) !== FALSE) {
      if ($file != "." && $file != "..") {
        closedir($handle); // Close directory.
        return FALSE;
      }
    }
    closedir($handle); // Close directory.
  }
  return TRUE;
}

/**
 * Get the path to the site specific directory.
 *
 * e.g. /var/aegir/platforms/drupal-7.x/sites/example.com
 */
function _hosting_git_getsitepath($node) {
  // Select the platform publish_path for $node->platform.
  $platform_publishpath = db_query("SELECT publish_path FROM {hosting_platform} WHERE nid = :nid", array(':nid' => $node->platform))->fetchField();

  if ($platform_publishpath) {
    return $platform_publishpath . '/sites/' . $node->title;
  }
  else {
    return FALSE;
  }
}

/**
 * Test to see if a platform or site node has an enabled status.
 *
 * @param object $node
 *   Node object
 *
 * @return bool
 */
function _hosting_git_site_or_platform_enabled($node) {
  return (
    isset($node->nid)
    && (
      ($node->type == 'site' && $node->site_status == HOSTING_SITE_ENABLED)
      || ($node->type == 'platform' && ($node->platform_status == HOSTING_PLATFORM_ENABLED || $node->platform_status == HOSTING_PLATFORM_LOCKED))
    )
  );
}
